from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã (–æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∑–¥–µ—Å—å)
PRICES = """
ü•¨ *–ê–ö–¢–£–ê–õ–¨–ù–´–ï –¶–ï–ù–´:*

üçÖ –ü–æ–º–∏–¥–æ—Ä—ã - 150‚ÇΩ/–∫–≥
ü•í –û–≥—É—Ä—Ü—ã - 120‚ÇΩ/–∫–≥
ü•î –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å - 40‚ÇΩ/–∫–≥
ü•ï –ú–æ—Ä–∫–æ–≤—å - 50‚ÇΩ/–∫–≥
ü•¨ –ö–∞–ø—É—Å—Ç–∞ - 35‚ÇΩ/–∫–≥
üßÖ –õ—É–∫ - 45‚ÇΩ/–∫–≥
üå∂ –ü–µ—Ä–µ—Ü - 200‚ÇΩ/–∫–≥
üçÜ –ë–∞–∫–ª–∞–∂–∞–Ω - 180‚ÇΩ/–∫–≥
"""

# –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∑–¥–µ—Å—å)
DELIVERY = """
üöö *–£–°–õ–û–í–ò–Ø –î–û–°–¢–ê–í–ö–ò:*

‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: 500‚ÇΩ
‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É: 100‚ÇΩ
‚Ä¢ –ü—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 2000‚ÇΩ - –¥–æ—Å—Ç–∞–≤–∫–∞ –ë–ï–°–ü–õ–ê–¢–ù–û
‚Ä¢ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: 9:00 - 21:00
‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –≤ –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞
‚Ä¢ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏

üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: +7 (XXX) XXX-XX-XX
"""

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üí∞ –¶–µ–Ω—ã", callback_data='prices')],
        [InlineKeyboardButton("üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data='delivery')],
        [InlineKeyboardButton("üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='order')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! ü•¨\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Å–≤–µ–∂–∏—Ö –æ–≤–æ—â–µ–π!",
        reply_markup=reply_markup
    )

async def show_prices(query):
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')]]
    await query.edit_message_text(
        PRICES,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def show_delivery(query):
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')]]
    await query.edit_message_text(
        DELIVERY,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def start_order(query, context):
    await query.edit_message_text(
        "üìù *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "*–¢–µ–ª–µ—Ñ–æ–Ω: +375 (00) 0000000*\n"
        "–í–∞—à –∑–∞–∫–∞–∑ —Ç–µ–∫—Å—Ç–æ–º\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "+375 (29) 1234567\n"
        "–ü–æ–º–∏–¥–æ—Ä—ã 2–∫–≥, –æ–≥—É—Ä—Ü—ã 3–∫–≥, –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å 5–∫–≥",
        parse_mode='Markdown'
    )
    context.user_data['ordering'] = True

async def handle_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('ordering'):
        return
    
    order_text = update.message.text
    user = update.effective_user
    
    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')]]
    
    await update.message.reply_text(
        f"‚úÖ *–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!*\n\n"
        f"*–û—Ç:* {user.first_name} (@{user.username or '–±–µ–∑ username'})\n\n"
        f"*–í–∞—à –∑–∞–∫–∞–∑:*\n{order_text}\n\n"
        f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è! üìû",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    context.user_data['ordering'] = False

async def back_to_menu(query):
    keyboard = [
        [InlineKeyboardButton("üí∞ –¶–µ–Ω—ã", callback_data='prices')],
        [InlineKeyboardButton("üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data='delivery')],
        [InlineKeyboardButton("üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='order')]
    ]
    await query.edit_message_text(
        "ü•¨ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'prices':
        await show_prices(query)
    elif query.data == 'delivery':
        await show_delivery(query)
    elif query.data == 'order':
        await start_order(query, context)
    elif query.data == 'back':
        await back_to_menu(query)

def main():
    TOKEN = "8226837521:AAEN9X67WQQ-zgBPpWZSF-oDNQlZJa5OeAw"
    
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_order))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()

